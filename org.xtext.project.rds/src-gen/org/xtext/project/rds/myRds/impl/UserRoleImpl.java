/**
 * generated by Xtext 2.25.0
 */
package org.xtext.project.rds.myRds.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.project.rds.myRds.MyRdsPackage;
import org.xtext.project.rds.myRds.Order;
import org.xtext.project.rds.myRds.UserRole;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>User Role</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.project.rds.myRds.impl.UserRoleImpl#getOrders <em>Orders</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UserRoleImpl extends AbstractElementImpl implements UserRole
{
  /**
   * The cached value of the '{@link #getOrders() <em>Orders</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrders()
   * @generated
   * @ordered
   */
  protected EList<Order> orders;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UserRoleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyRdsPackage.Literals.USER_ROLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Order> getOrders()
  {
    if (orders == null)
    {
      orders = new EObjectResolvingEList<Order>(Order.class, this, MyRdsPackage.USER_ROLE__ORDERS);
    }
    return orders;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyRdsPackage.USER_ROLE__ORDERS:
        return getOrders();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyRdsPackage.USER_ROLE__ORDERS:
        getOrders().clear();
        getOrders().addAll((Collection<? extends Order>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyRdsPackage.USER_ROLE__ORDERS:
        getOrders().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyRdsPackage.USER_ROLE__ORDERS:
        return orders != null && !orders.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //UserRoleImpl
