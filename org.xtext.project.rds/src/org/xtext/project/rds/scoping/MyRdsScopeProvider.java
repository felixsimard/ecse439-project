/*
 * generated by Xtext 2.25.0
 */
package org.xtext.project.rds.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.project.rds.myRds.Order;
import org.xtext.project.rds.myRds.OrderItem;
import org.xtext.project.rds.myRds.Customer;
import org.xtext.project.rds.myRds.DeliveryDriver;
import org.xtext.project.rds.myRds.MenuItem;
import org.xtext.project.rds.myRds.MyRdsPackage;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class MyRdsScopeProvider extends AbstractMyRdsScopeProvider {
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
	    // We want to define the Scope for the Element's superElement cross-reference
	    if (context instanceof Order
	            && reference == MyRdsPackage.Literals.ORDER__CUSTOMER) {
	        // Collect a list of candidates by going through the model
	        // EcoreUtil2 provides useful functionality to do that
	        // For example searching for all elements within the root Object's tree
	        EObject rootElement = EcoreUtil2.getRootContainer(context);
	        List<Customer> candidates = EcoreUtil2.getAllContentsOfType(rootElement, Customer.class);
	        
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates);
	    }
	    
	    else if (context instanceof Order
	            && reference == MyRdsPackage.Literals.ORDER__DELIVERY_DRIVER) {
	        // Collect a list of candidates by going through the model
	        // EcoreUtil2 provides useful functionality to do that
	        // For example searching for all elements within the root Object's tree
	        EObject rootElement = EcoreUtil2.getRootContainer(context);
	        List<DeliveryDriver> candidates = EcoreUtil2.getAllContentsOfType(rootElement, DeliveryDriver.class);
	        
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates);
	    }
	    
	    else if (context instanceof OrderItem
	            && reference == MyRdsPackage.Literals.ORDER_ITEM__MENU_ITEM) {
	        // Collect a list of candidates by going through the model
	        // EcoreUtil2 provides useful functionality to do that
	        // For example searching for all elements within the root Object's tree
	        EObject rootElement = EcoreUtil2.getRootContainer(context);
	        List<MenuItem> candidates = EcoreUtil2.getAllContentsOfType(rootElement, MenuItem.class);
	        
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates);
	    }
	    return super.getScope(context, reference);
	}

}
